---
# Workflow for automatically building and deploying docker images for kurtosis-cdk.

name: Custom Docker Build

on:
  workflow_dispatch:
    inputs:
      zkevm_contracts_version:
        description: The ZkEVM contracts version tag to build (e.g., v0.6.0 or a commit hash)
        required: true

env:
  IMAGE: leovct/zkevm-contracts

jobs:
  docker:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout zkevm-contracts repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.zkevm_contracts_version }}
      
      - name: Checkout kurtosis-cdk repository
        uses: actions/checkout@v4
        with:
          repository: 0xPolygon/kurtosis-cdk
          path: kurtosis-cdk

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Determine full tag
        id: determine_tag
        run: |
          TAG=${{ github.event.inputs.zkevm_contracts_version }}
          if [[ $TAG == *pp ]]; then
            FULL_TAG="${TAG}-fork.12"
          else
            FULL_TAG=$TAG
          fi
          echo "::set-output name=full_tag::$FULL_TAG"

      - name: Check if image already exists
        id: check_image
        run: |
          if docker manifest inspect ${{ env.IMAGE }}:${{ steps.determine_tag.outputs.full_tag }} > /dev/null 2>&1; then
            echo "Image already exists, skipping build."
            echo "::set-output name=exists::true"
          else
            echo "Image does not exist."
            echo "::set-output name=exists::false"
          fi

      - name: Build and push
        if: ${{ steps.check_image.outputs.exists == 'false' }}
        uses: docker/build-push-action@v6
        with:
          context: kurtosis-cdk/docker
          file: zkevm-contracts.Dockerfile
          push: true
          tags: ${{ env.IMAGE }}:${{ steps.determine_tag.outputs.full_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
